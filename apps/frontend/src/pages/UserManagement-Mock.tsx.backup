import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '../components/ui/label';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Badge } from '../components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '../components/ui/tabs';
import { 
  Plus, 
  Search, 
  Filter, 
  Mail, 
  Users, 
  Settings, 
  Eye, 
  Edit, 
  Trash2, 
  UserPlus, 
  Shield, 
  DollarSign,
  Calendar,
  Building,
  Phone,
  Globe,
  Lock,
  Unlock,
  RotateCcw,
  Send,
  CheckCircle,
  AlertCircle,
  XCircle,
  TrendingUp,
  Activity,
  MoreVertical,
  UserCheck
} from 'lucide-react';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../components/ui/select';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '../components/ui/dialog';
import { Textarea } from '../components/ui/textarea';
import { Switch } from '../components/ui/switch';
import { useAuth } from '@clerk/clerk-react';
import { 
  DropdownMenu, 
  DropdownMenuContent, 
  DropdownMenuItem, 
  DropdownMenuTrigger,
  DropdownMenuSeparator 
} from '@/components/ui/dropdown-menu';
import { useNavigate } from 'react-router-dom';
import { useToast } from '@/hooks/use-toast';

interface User {
  id: string;
  email: string;
  firstName: string;
  lastName: string;
  role: 'agency_owner' | 'agency_admin' | 'agency_user' | 'platform_admin' | 'platform_owner';
  status: 'active' | 'inactive' | 'suspended' | 'pending_invite';
  agencyId?: string;
  agencyName?: string;
  lastLogin?: string;
  createdAt: string;
  subscription?: {
    plan: 'starter' | 'professional' | 'enterprise';
    status: 'active' | 'cancelled' | 'past_due';
    mrr: number;
  };
  metrics?: {
    totalCalls: number;
    totalLeads: number;
    conversionRate: number;
    totalRevenue: number;
  };
  phone?: string;
}

interface Agency {
  id: string;
  name: string;
  domain?: string;
  logo?: string;
  primaryColor: string;
  status: 'active' | 'inactive' | 'trial' | 'suspended';
  subscription: {
    plan: 'starter' | 'professional' | 'enterprise';
    status: 'active' | 'cancelled' | 'past_due';
    mrr: number;
    nextBilling: string;
  };
  owner: {
    email: string;
    firstName: string;
    lastName: string;
  };
  metrics: {
    totalUsers: number;
    totalCalls: number;
    totalLeads: number;
    totalRevenue: number;
  };
  createdAt: string;
  lastActivity: string;
}

// API base URL
const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:3001/api';

const statusColors = {
  active: 'bg-green-500',
  inactive: 'bg-gray-500',
  suspended: 'bg-red-500',
  pending_invite: 'bg-yellow-500',
  trial: 'bg-blue-500'
};

const roleLabels = {
  agency_owner: 'Agency Owner',
  agency_admin: 'Agency Admin', 
  agency_user: 'Agency User',
  platform_admin: 'Platform Admin',
  platform_owner: 'Platform Owner'
};

const planLabels = {
  starter: 'Starter ‚ö°',
  professional: 'Professional üëë',
  enterprise: 'Enterprise üåê'
};

export default function UserManagement() {
  const navigate = useNavigate();
  const { getToken } = useAuth();
  const { toast } = useToast();
  
  const [users, setUsers] = useState<User[]>([]);
  const [agencies, setAgencies] = useState<Agency[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedRole, setSelectedRole] = useState('all');
  const [selectedStatus, setSelectedStatus] = useState('all');
  const [selectedAgency, setSelectedAgency] = useState('all');
  const [showInviteModal, setShowInviteModal] = useState(false);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [inviteEmail, setInviteEmail] = useState('');
  const [inviteRole, setInviteRole] = useState('agency_user');
  const [inviteAgency, setInviteAgency] = useState('');

  // Fetch users from API
  const fetchUsers = async () => {
    try {
      setLoading(true);
      const token = await getToken();
      const response = await fetch(`${API_BASE_URL}/users`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });
      
      if (response.ok) {
        const data = await response.json();
        setUsers(data.users || []);
      } else {
        throw new Error('Failed to fetch users');
      }
    } catch (error) {
      console.error('Error fetching users:', error);
      toast({
        title: "Error",
        description: "Failed to load users. Please try again.",
        variant: "destructive"
      });
      setUsers([]);
    } finally {
      setLoading(false);
    }
  };

  // Fetch agencies from API
  const fetchAgencies = async () => {
    try {
      const token = await getToken();
      const response = await fetch(`${API_BASE_URL}/organizations`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });
      
      if (response.ok) {
        const data = await response.json();
        setAgencies(data.organizations || []);
      } else {
        throw new Error('Failed to fetch agencies');
      }
    } catch (error) {
      console.error('Error fetching agencies:', error);
      toast({
        title: "Error",
        description: "Failed to load agencies. Please try again.",
        variant: "destructive"
      });
      setAgencies([]);
    }
  };

  useEffect(() => {
    fetchUsers();
    fetchAgencies();
  }, []);

  // Filter users
  const filteredUsers = users.filter(user => {
    const matchesSearch = 
      user.email.toLowerCase().includes(searchTerm.toLowerCase()) ||
      user.firstName.toLowerCase().includes(searchTerm.toLowerCase()) ||
      user.lastName.toLowerCase().includes(searchTerm.toLowerCase()) ||
      user.agencyName?.toLowerCase().includes(searchTerm.toLowerCase());
    
    const matchesStatus = selectedStatus === 'all' || (user.status || 'active') === selectedStatus;
    const matchesRole = selectedRole === 'all' || user.role === selectedRole;
    
    return matchesSearch && matchesStatus && matchesRole;
  });

  // Calculate platform metrics
  const platformMetrics = {
    totalUsers: users.length,
    totalAgencies: agencies.length,
    totalMRR: agencies.reduce((sum, agency) => sum + agency.subscription.mrr, 0),
    totalCalls: agencies.reduce((sum, agency) => sum + agency.metrics.totalCalls, 0),
    avgConversionRate: users.reduce((sum, user) => sum + (user.metrics?.conversionRate || 0), 0) / users.filter(u => u.metrics?.conversionRate).length
  };

  const handleSendInvite = async () => {
    try {
      // TODO: Implement actual email sending
      console.log('Sending invite:', inviteForm);
      
      // Add new user as pending
      const newUser: User = {
        id: Date.now().toString(),
        email: inviteForm.email,
        firstName: inviteForm.firstName,
        lastName: inviteForm.lastName,
        role: inviteForm.role as User['role'],
        status: 'pending_invite',
        agencyName: inviteForm.agencyName,
        createdAt: new Date().toISOString(),
        subscription: {
          plan: inviteForm.plan as User['subscription']['plan'],
          status: 'active',
          mrr: inviteForm.plan === 'starter' ? 299 : inviteForm.plan === 'professional' ? 599 : 1299
        },
        phone: newUserForm.phone
      };
      
      setUsers([...users, newUser]);
      setShowInviteModal(false);
      
      // Reset form
      setInviteForm({
        email: '',
        firstName: '',
        lastName: '',
        role: 'agency_owner',
        agencyName: '',
        plan: 'professional',
        message: 'You\'ve been invited to join the Apex AI Calling Platform. Click the link below to set up your account and start building your AI calling campaigns.'
      });
      
      alert('Invite sent successfully!');
    } catch (error) {
      console.error('Error sending invite:', error);
      alert('Error sending invite. Please try again.');
    }
  };

  const handleUserAction = (action: string, userId: string) => {
    setUsers(users.map(user => {
      if (user.id === userId) {
        switch (action) {
          case 'activate':
            return { ...user, status: 'active' as User['status'] };
          case 'suspend':
            return { ...user, status: 'suspended' as User['status'] };
          case 'deactivate':
            return { ...user, status: 'inactive' as User['status'] };
          default:
            return user;
        }
      }
      return user;
    }));
  };

  const handlePasswordReset = async (userId: string) => {
    try {
      // TODO: Implement actual password reset
      console.log('Sending password reset for user:', userId);
      alert('Password reset email sent successfully!');
    } catch (error) {
      console.error('Error sending password reset:', error);
      alert('Error sending password reset. Please try again.');
    }
  };

  const handleCreateUser = async () => {
    try {
      setError(null);
      
      // Validate form
      if (!newUserForm.firstName || !newUserForm.lastName || !newUserForm.email || !newUserForm.accountName) {
        setError('Please fill in all required fields');
        return;
      }

      console.log('Creating user with data:', newUserForm);

      const response = await fetch(`${API_BASE_URL}/users`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('auth_token')}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(newUserForm)
      });

      const data = await response.json();
      console.log('Create user response:', data);

      if (!response.ok) {
        throw new Error(data.error || 'Failed to create user');
      }

      // Success - refresh users list
      await fetchUsers();
      setShowCreateModal(false);
      
      // Reset form
      setNewUserForm({
        firstName: '',
        lastName: '',
        email: '',
        phone: '',
        role: 'agency_owner',
        accountName: '',
        accountType: 'agency'
      });
      
      alert('User created successfully!');
    } catch (error) {
      console.error('Error creating user:', error);
      setError(error instanceof Error ? error.message : 'Failed to create user');
    }
  };

  const handleDeleteUser = (userId: string) => {
    toast({
      title: "User deleted",
      description: "The user has been removed from the system.",
    });
    setUsers(users.filter(u => u.id !== userId));
  };

  const handleToggleStatus = (userId: string) => {
    setUsers(users.map(user => 
      user.id === userId 
        ? { ...user, status: user.status === 'active' ? 'inactive' : 'active' }
        : user
    ));
    toast({
      title: "Status updated",
      description: "User status has been changed successfully.",
    });
  };

  const getRoleColor = (role: string) => {
    switch (role) {
      case 'platform_owner': return 'bg-emerald-600/20 text-emerald-400 border-emerald-600/30';
      case 'agency_admin': return 'bg-blue-600/20 text-blue-400 border-blue-600/30';
      case 'agency_user': return 'bg-gray-600/20 text-gray-400 border-gray-600/30';
      default: return 'bg-gray-600/20 text-gray-400 border-gray-600/30';
    }
  };

  const getPlanColor = (plan: string) => {
    switch (plan) {
      case 'enterprise': return 'bg-emerald-600/20 text-emerald-400 border-emerald-600/30';
      case 'professional': return 'bg-blue-600/20 text-blue-400 border-blue-600/30';
      case 'starter': return 'bg-emerald-600/20 text-emerald-400 border-emerald-600/30';
      default: return 'bg-gray-600/20 text-gray-400 border-gray-600/30';
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 p-6">
      <div className="max-w-7xl mx-auto space-y-6">
        
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-4xl font-bold text-white mb-2">User Management</h1>
          <p className="text-gray-400">Manage platform users and agencies</p>
        </div>

        {/* Stats Cards */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
          <Card className="bg-gray-800/50 border-gray-700 backdrop-blur-sm">
            <CardHeader className="flex flex-row items-center justify-between pb-2">
              <CardTitle className="text-sm font-medium text-gray-400">Total Users</CardTitle>
              <Users className="h-4 w-4 text-gray-400" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-white">{platformMetrics.totalUsers}</div>
              <p className="text-xs text-gray-500 mt-1">Across all agencies</p>
            </CardContent>
          </Card>

          <Card className="bg-gray-800/50 border-gray-700 backdrop-blur-sm">
            <CardHeader className="flex flex-row items-center justify-between pb-2">
              <CardTitle className="text-sm font-medium text-gray-400">Active Users</CardTitle>
              <UserCheck className="h-4 w-4 text-emerald-400" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-white">{users.filter(u => u.status === 'active').length}</div>
              <div className="flex items-center text-xs text-emerald-400 mt-1">
                <TrendingUp className="w-3 h-3 mr-1" />
                {Math.round((users.filter(u => u.status === 'active').length / platformMetrics.totalUsers) * 100)}% active rate
              </div>
            </CardContent>
          </Card>

          <Card className="bg-gray-800/50 border-gray-700 backdrop-blur-sm">
            <CardHeader className="flex flex-row items-center justify-between pb-2">
              <CardTitle className="text-sm font-medium text-gray-400">Total Agencies</CardTitle>
              <Building className="h-4 w-4 text-blue-400" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-white">{platformMetrics.totalAgencies}</div>
              <p className="text-xs text-gray-500 mt-1">Active organizations</p>
            </CardContent>
          </Card>

          <Card className="bg-gray-800/50 border-gray-700 backdrop-blur-sm">
            <CardHeader className="flex flex-row items-center justify-between pb-2">
              <CardTitle className="text-sm font-medium text-gray-400">Monthly Revenue</CardTitle>
              <DollarSign className="h-4 w-4 text-green-400" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-white">${platformMetrics.totalMRR.toLocaleString()}</div>
              <p className="text-xs text-gray-500 mt-1">Recurring revenue</p>
            </CardContent>
          </Card>
        </div>

        {/* Main Content */}
        <Card className="bg-gray-800/50 border-gray-700 backdrop-blur-sm">
          <CardHeader>
            <div className="flex items-center justify-between">
              <div>
                <CardTitle className="text-white">Platform Users</CardTitle>
                <CardDescription className="text-gray-400">
                  Manage all users across the platform
                </CardDescription>
              </div>
              <Button 
                className="bg-gradient-to-r from-emerald-600 to-blue-600 hover:from-emerald-700 hover:to-blue-700"
                onClick={() => navigate('/add-user')}
              >
                <UserPlus className="w-4 h-4 mr-2" />
                Add User
              </Button>
            </div>
          </CardHeader>
          <CardContent>
            <Tabs defaultValue="users" className="space-y-4">
              <TabsList className="bg-gray-900/50 border-gray-700">
                <TabsTrigger value="users" className="data-[state=active]:bg-emerald-600/20 data-[state=active]:text-emerald-400">
                  <Users className="w-4 h-4 mr-2" />
                  Users ({filteredUsers.length})
                </TabsTrigger>
                <TabsTrigger value="agencies" className="data-[state=active]:bg-emerald-600/20 data-[state=active]:text-emerald-400">
                  <Building className="w-4 h-4 mr-2" />
                  Agencies ({agencies.length})
                </TabsTrigger>
              </TabsList>

              <TabsContent value="users" className="space-y-4">
                {/* Filters */}
                <div className="flex flex-col md:flex-row gap-4">
                  <div className="flex-1">
                    <div className="relative">
                      <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                      <Input
                        placeholder="Search users..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                        className="pl-10 bg-gray-900/50 border-gray-700 text-white placeholder-gray-500 focus:border-emerald-500"
                      />
                    </div>
                  </div>
                  
                  <Select value={selectedStatus} onValueChange={setSelectedStatus}>
                    <SelectTrigger className="w-[180px] bg-gray-900/50 border-gray-700 text-white">
                      <SelectValue placeholder="Filter by status" />
                    </SelectTrigger>
                    <SelectContent className="bg-gray-900 border-gray-700">
                      <SelectItem value="all">All statuses</SelectItem>
                      <SelectItem value="active">Active</SelectItem>
                      <SelectItem value="inactive">Inactive</SelectItem>
                    </SelectContent>
                  </Select>

                  <Select value={selectedRole} onValueChange={setSelectedRole}>
                    <SelectTrigger className="w-[180px] bg-gray-900/50 border-gray-700 text-white">
                      <SelectValue placeholder="Filter by role" />
                    </SelectTrigger>
                    <SelectContent className="bg-gray-900 border-gray-700">
                      <SelectItem value="all">All roles</SelectItem>
                      <SelectItem value="agency_admin">Agency Admin</SelectItem>
                      <SelectItem value="agency_user">Agency User</SelectItem>
                    </SelectContent>
                  </Select>

                  <Button variant="outline" className="border-gray-700 hover:border-emerald-600 hover:bg-emerald-600/10">
                    <Filter className="w-4 h-4 mr-2" />
                    More Filters
                  </Button>
                </div>

                {/* Users List */}
                <div className="space-y-4">
                  {filteredUsers.map((user) => (
                    <div key={user.id} className="p-4 bg-gray-900/50 rounded-lg border border-gray-700 hover:bg-gray-900/70 transition-all duration-200">
                      <div className="flex items-start justify-between">
                        <div className="flex items-start gap-4">
                          <div className="w-12 h-12 rounded-full bg-gradient-to-r from-emerald-600 to-blue-600 flex items-center justify-center text-white font-semibold">
                            {user.firstName[0]}{user.lastName[0]}
                          </div>
                          <div className="flex-1">
                            <div className="flex items-center gap-3 mb-1">
                              <h4 className="text-lg font-medium text-white">{user.firstName} {user.lastName}</h4>
                              <Badge className={getRoleColor(user.role)}>
                                {user.role.replace('_', ' ').toUpperCase()}
                              </Badge>
                              <Badge className={user.status === 'active' ? 'bg-emerald-600/20 text-emerald-400 border-emerald-600/30' : 'bg-gray-600/20 text-gray-400 border-gray-600/30'}>
                                {user.status === 'active' ? <CheckCircle className="w-3 h-3 mr-1" /> : <XCircle className="w-3 h-3 mr-1" />}
                                {user.status.charAt(0).toUpperCase() + user.status.slice(1)}
                              </Badge>
                              <Badge className={getPlanColor(user.subscription?.plan || 'starter')}>
                                {user.subscription?.plan.charAt(0).toUpperCase() + user.subscription?.plan.slice(1)}
                              </Badge>
                            </div>
                            
                            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mt-3 text-sm">
                              <div className="flex items-center gap-2 text-gray-400">
                                <Mail className="w-4 h-4" />
                                <span>{user.email}</span>
                              </div>
                              <div className="flex items-center gap-2 text-gray-400">
                                <Phone className="w-4 h-4" />
                                <span>{user.phone}</span>
                              </div>
                              <div className="flex items-center gap-2 text-gray-400">
                                <Building className="w-4 h-4" />
                                <span>{user.agencyName}</span>
                              </div>
                              <div className="flex items-center gap-2 text-gray-400">
                                <Calendar className="w-4 h-4" />
                                <span>Joined {user.createdAt}</span>
                              </div>
                            </div>

                            <div className="flex items-center gap-6 mt-3 text-xs text-gray-500">
                              <div>
                                <span className="text-gray-400">Last login:</span> {user.lastLogin}
                              </div>
                              <div>
                                <span className="text-gray-400">Total calls:</span> {user.metrics?.totalCalls.toLocaleString()}
                              </div>
                              <div>
                                <span className="text-gray-400">Active assistants:</span> {user.metrics?.totalLeads.toLocaleString()}
                              </div>
                            </div>
                          </div>
                        </div>

                        <DropdownMenu>
                          <DropdownMenuTrigger asChild>
                            <Button variant="ghost" size="sm" className="text-gray-400 hover:text-white">
                              <MoreVertical className="w-4 h-4" />
                            </Button>
                          </DropdownMenuTrigger>
                          <DropdownMenuContent align="end" className="bg-gray-900 border-gray-700">
                            <DropdownMenuItem className="text-gray-300 hover:text-white hover:bg-gray-800">
                              <Edit className="w-4 h-4 mr-2" />
                              Edit User
                            </DropdownMenuItem>
                            <DropdownMenuItem 
                              className="text-gray-300 hover:text-white hover:bg-gray-800"
                              onClick={() => handleToggleStatus(user.id)}
                            >
                              {user.status === 'active' ? (
                                <>
                                  <XCircle className="w-4 h-4 mr-2" />
                                  Deactivate
                                </>
                              ) : (
                                <>
                                  <CheckCircle className="w-4 h-4 mr-2" />
                                  Activate
                                </>
                              )}
                            </DropdownMenuItem>
                            <DropdownMenuItem className="text-gray-300 hover:text-white hover:bg-gray-800">
                              <Shield className="w-4 h-4 mr-2" />
                              Reset Password
                            </DropdownMenuItem>
                            <DropdownMenuSeparator className="bg-gray-700" />
                            <DropdownMenuItem 
                              className="text-red-400 hover:text-red-300 hover:bg-gray-800"
                              onClick={() => handleDeleteUser(user.id)}
                            >
                              <Trash2 className="w-4 h-4 mr-2" />
                              Delete User
                            </DropdownMenuItem>
                          </DropdownMenuContent>
                        </DropdownMenu>
                      </div>
                    </div>
                  ))}

                  {filteredUsers.length === 0 && (
                    <div className="text-center py-12">
                      <div className="w-16 h-16 bg-gray-700/50 rounded-full flex items-center justify-center mx-auto mb-4">
                        <AlertCircle className="w-8 h-8 text-gray-400" />
                      </div>
                      <h3 className="text-lg font-medium text-white mb-2">No users found</h3>
                      <p className="text-gray-400">Try adjusting your filters or search terms</p>
                    </div>
                  )}
                </div>
              </TabsContent>

              <TabsContent value="agencies" className="space-y-4">
                <div className="grid gap-4">
                  {agencies.map((agency) => (
                    <div key={agency.id} className="p-4 bg-gray-900/50 rounded-lg border border-gray-700 hover:bg-gray-900/70 transition-all duration-200">
                      <div className="flex items-center justify-between">
                        <div>
                          <div className="flex items-center gap-3 mb-2">
                            <h4 className="text-lg font-medium text-white">{agency.name}</h4>
                            <Badge className={getPlanColor(agency.subscription.plan)}>
                              {agency.subscription.plan.charAt(0).toUpperCase() + agency.subscription.plan.slice(1)}
                            </Badge>
                            <Badge className="bg-emerald-600/20 text-emerald-400 border-emerald-600/30">
                              <CheckCircle className="w-3 h-3 mr-1" />
                              Active
                            </Badge>
                          </div>
                          
                          <div className="grid grid-cols-2 md:grid-cols-4 gap-6 text-sm">
                            <div>
                              <p className="text-gray-400">Total Users</p>
                              <p className="text-white font-medium">{agency.metrics.totalUsers}</p>
                            </div>
                            <div>
                              <p className="text-gray-400">Active Users</p>
                              <p className="text-white font-medium">{agency.metrics.totalUsers - agency.metrics.totalCalls}</p>
                            </div>
                            <div>
                              <p className="text-gray-400">Total Calls</p>
                              <p className="text-white font-medium">{agency.metrics.totalCalls.toLocaleString()}</p>
                            </div>
                            <div>
                              <p className="text-gray-400">Monthly Spend</p>
                              <p className="text-white font-medium">${agency.metrics.totalRevenue.toLocaleString()}</p>
                            </div>
                          </div>
                        </div>

                        <Button variant="outline" size="sm" className="border-gray-700 hover:border-emerald-600 hover:bg-emerald-600/10">
                          View Details
                        </Button>
                      </div>
                    </div>
                  ))}
                </div>
              </TabsContent>
            </Tabs>
          </CardContent>
        </Card>
      </div>
    </div>
  );
} 